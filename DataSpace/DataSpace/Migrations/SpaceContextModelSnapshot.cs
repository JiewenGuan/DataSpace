// <auto-generated />
using System;
using DataSpace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataSpace.Migrations
{
    [DbContext(typeof(SpaceContext))]
    partial class SpaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataSpace.Models.ExpRole", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RoleID");

                    b.ToTable("ExpRoles");
                });

            modelBuilder.Entity("DataSpace.Models.Experiment", b =>
                {
                    b.Property<int>("ExperimentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Aim")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExperimentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeildOfResearch")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeadInstitutionID")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("MissionID")
                        .HasColumnType("int");

                    b.Property<string>("ModuleDrawing")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SocialEconomicObjective")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TOA")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ExperimentID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LeadInstitutionID");

                    b.HasIndex("MissionID");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("DataSpace.Models.Institution", b =>
                {
                    b.Property<string>("ABN")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ABN");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("DataSpace.Models.Login", b =>
                {
                    b.Property<string>("LoginID")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("BadAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastBadLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("LoginID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("DataSpace.Models.Mission", b =>
                {
                    b.Property<int>("MissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Commancement")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Conclusion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlatformID")
                        .HasColumnType("int");

                    b.HasKey("MissionID");

                    b.HasIndex("PlatformID");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("DataSpace.Models.Participation", b =>
                {
                    b.Property<int>("ParticipateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExperimentID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ParticipateID");

                    b.HasIndex("ExperimentID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RoleID");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("DataSpace.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InstitutionID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PersonID");

                    b.HasIndex("InstitutionID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DataSpace.Models.Platform", b =>
                {
                    b.Property<int>("PlatformID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PlatformID");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("DataSpace.Models.ResultDataset", b =>
                {
                    b.Property<int>("DatasetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EvaluationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ExperimentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DatasetID");

                    b.HasIndex("ExperimentID");

                    b.ToTable("ResultDatasets");
                });

            modelBuilder.Entity("DataSpace.Models.Experiment", b =>
                {
                    b.HasOne("DataSpace.Models.Person", "Author")
                        .WithMany("Experimentssubmit")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpace.Models.Institution", "LeadIstitution")
                        .WithMany("Experiments")
                        .HasForeignKey("LeadInstitutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpace.Models.Mission", "Mission")
                        .WithMany("Experiments")
                        .HasForeignKey("MissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataSpace.Models.Login", b =>
                {
                    b.HasOne("DataSpace.Models.Person", "Person")
                        .WithOne("Login")
                        .HasForeignKey("DataSpace.Models.Login", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataSpace.Models.Mission", b =>
                {
                    b.HasOne("DataSpace.Models.Platform", "Platform")
                        .WithMany("Missions")
                        .HasForeignKey("PlatformID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataSpace.Models.Participation", b =>
                {
                    b.HasOne("DataSpace.Models.Experiment", "Experiment")
                        .WithMany("Participants")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpace.Models.Person", "Participant")
                        .WithMany("Participates")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpace.Models.ExpRole", "Role")
                        .WithMany("Participants")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataSpace.Models.Person", b =>
                {
                    b.HasOne("DataSpace.Models.Institution", "Institution")
                        .WithMany("People")
                        .HasForeignKey("InstitutionID");
                });

            modelBuilder.Entity("DataSpace.Models.ResultDataset", b =>
                {
                    b.HasOne("DataSpace.Models.Experiment", "Experiment")
                        .WithMany("Datasets")
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
